{"version":3,"sources":["index.js"],"names":["Square","className","onClick","props","this","value","React","Component","Board","baseArray","squares","shuffle","squareStates","Array","fill","state","started","currentlySelectedIndex","currentNumTurns","toggleStartStop","bind","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","i","setState","slice","setTimeout","valueStr","style","backgroundColor","handleClick","clearInterval","timer","renderSquare","align","height","disabled","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23963dca.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nclass Square extends React.Component {\r\n    render() {\r\n      return (\r\n        <button className=\"square\" onClick={() => this.props.onClick()}>\r\n          {this.props.value}\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n\r\n    baseArray = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10] //,11,11,12,12]\r\n\r\n    shuffle(array) {\r\n      var currentIndex = array.length, temporaryValue, randomIndex;\r\n    \r\n      // While there remain elements to shuffle...\r\n      while (0 !== currentIndex) {\r\n    \r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n    \r\n        // And swap it with the current element. \r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n      }\r\n    \r\n      return array;\r\n    }\r\n    \r\n\r\n    constructor(props)\r\n    {\r\n      super(props);\r\n\r\n      var squares = this.shuffle(this.baseArray);\r\n      var squareStates = Array(20).fill(false)\r\n\r\n      this.state = {\r\n        squares: squares,\r\n        squareStates : squareStates,\r\n        started: false,\r\n        currentlySelectedIndex : null,\r\n        currentNumTurns : 0\r\n      };\r\n\r\n      this.toggleStartStop = this.toggleStartStop.bind(this);\r\n    }\r\n\r\n    handleClick(i) \r\n    {\r\n     // const squares = this.state.squares.slice();\r\n\r\n      if (!this.state.started)\r\n      {\r\n        this.setState(\r\n          {\r\n            started : true\r\n          }\r\n        )\r\n      }\r\n\r\n      const squareStates = this.state.squareStates.slice();\r\n\r\n      // if this square is already revaled, nothing doing\r\n      if (squareStates[i])\r\n        return;\r\n\r\n      // have we selected a square?\r\n      if (this.state.currentlySelectedIndex != null)\r\n      {\r\n          if (i === this.state.currentlySelectedIndex)\r\n          {\r\n            return;\r\n          }\r\n\r\n          squareStates[i] = true\r\n\r\n          // need to show the card then turn them back over after a second .. and disable any update until then  .. \r\n          \r\n\r\n          // ok does the value match or not?\r\n          if (this.state.squares[i] !== this.state.squares[this.state.currentlySelectedIndex])\r\n          {\r\n            this.setState({\r\n              squareStates : squareStates\r\n            })\r\n            // leave both as revealed\r\n            // and within 0.5 seconds hide them again\r\n            var update = () => {\r\n              squareStates[i] = false\r\n              squareStates[this.state.currentlySelectedIndex] = false\r\n              \r\n              this.setState({\r\n                currentNumTurns : this.state.currentNumTurns + 1,\r\n                currentlySelectedIndex : null,\r\n                squareStates : squareStates\r\n              })  \r\n            }\r\n    \r\n            setTimeout(update, 300)\r\n          }\r\n          else{\r\n            this.setState({\r\n              squareStates : squareStates,\r\n              currentlySelectedIndex : null\r\n            })\r\n          }\r\n          \r\n          \r\n      }\r\n      else // only select if not already revelealed\r\n      {\r\n        squareStates[i] = true\r\n\r\n        this.setState({\r\n          currentlySelectedIndex : i,\r\n          squareStates : squareStates\r\n        })\r\n        \r\n      }\r\n\r\n      return;\r\n        \r\n    }\r\n    \r\n    \r\n    renderSquare(i) {\r\n\r\n      var valueStr = this.state.squareStates[i] ? this.state.squares[i] : \"*\"\r\n\r\n      return <Square style={{\r\n        backgroundColor: this.state.started ? '#000000' : '#cccccc',\r\n      }}  value={valueStr} onClick={() => this.handleClick(i)} />;\r\n    }\r\n\r\n    toggleStartStop()\r\n    {\r\n      var squares = this.shuffle(this.baseArray);\r\n      var squareStates = Array(20).fill(false)\r\n\r\n      this.setState ({\r\n        squares: squares,\r\n        squareStates : squareStates,\r\n        started: false,\r\n        currentlySelectedIndex : null,\r\n        currentNumTurns : 0\r\n      });\r\n    \r\n    }\r\n\r\n    componentWillUnmount() {\r\n      clearInterval(this.timer);\r\n    }\r\n  \r\n    render() {\r\n  \r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n            {this.renderSquare(3)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(8)}\r\n            {this.renderSquare(9)}\r\n            {this.renderSquare(10)}\r\n            {this.renderSquare(11)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(12)}\r\n            {this.renderSquare(13)}\r\n            {this.renderSquare(14)}\r\n            {this.renderSquare(15)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(16)}\r\n            {this.renderSquare(17)}\r\n            {this.renderSquare(18)}\r\n            {this.renderSquare(19)}\r\n          </div>\r\n          <div align=\"center\">\r\n            <br/>\r\n            <button height=\"200px\" onClick={this.toggleStartStop} disabled={!this.state.started}>Restart</button>\r\n            &nbsp;\r\n            <br/><br/>\r\n            Number Of Turns : {this.state.currentNumTurns}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{/* status */}</div>\r\n            <ol>{/* TODO */}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}